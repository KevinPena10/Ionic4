-------------------------- NOTAS DEL CURSO DE IONIC 4 -------------------------------

La Version 4 de Ionic trabaja es con Capacitor y deja de un lado Cordova.
Basicamente Capacitor envuelve el código web y provee mecanismos de conexión con los 
elementos del dispositivo (Cámara, sensores) a través de Plugins.

Para iniciar un proyecto ionic es con el comando:
ionic start 
ionic serve -> Iniciar 
Con ionic --list -> Me muestra los tipos de template que tiene Ionic al iniciar

Para instalar capacitor es con el comando:
npm install --save @capacitor/core @capacitor/cli li --save-exact

con npx cap init -> Agregamos a nuestro proyecto el Capacitor
   Con npx cap add android -> Agregamos a Capacitor la plataforma de android
   Pero ANTES de ejecutar el comando, se debe correr: ionic build ->
   para que este cree la carpeta WWW(Contiene todo el proyecto
   con los archivos minificados, partidos, etc. y es la carpeta principal
   que trae todos los archivos cuando se lleve a una plataforma nativa
   ) ya que la carpeta que genera el build  es el código o 
   paquete que va tomar Capacitor como referencia para comenzar con
   el android 

   Este comando crea una carpeta para Android  que se puede 
   abrir del lado del Android Studio, con el comando 
   npx cap open android

   Para sincronizar tus dispostivos con el desarrollo actual:

   - Siempre ejecutar el comando ionic build. 
   - Luego " npx cap sync " logra que los dispositivos de ios y android
   se sincronicen 

   npx cap copy: Este comando es utilizado cuando 
   solo modificas el html del proyecto para que
   se sincronice de forma rapida.

   El npx cap update o sync: Se utiliza es cuando
   se haya agregado Plugins a tu proyecto, cuando
   se modifica el código nativo o algo por fuera de
   la carpeta WWW.

   Con la etiqueta o componente:
    <ion-icon name=""></ion-icon>
    podemos agregar iconos de Ionic y se buscan en la siguiente pagina:

    En los estilos estamos utilizando 
     --background: var(--ion-color-success);
     donde var(--ion-color-success) basicamente lo estamos obteniendo de 
     theme, variables.sccs donde vas encontrar los colores que tiene Ionic


     Cuando nos encontramos en la documentación de Ionic 
     los estilos de Css para modificar, "CSS Custom Properties"
     me va salir asi:
     --background: -> lo que quiere decir esos -- es que es la unica
     manera de modificar los estilos de ionic directamente, osea 
     que para modificar el background en especifico en un componente 
     de ionic toca acceder con --

     Comandos de Ionic:

     Para generar una nueva pagina con Ionic se utiliza 
     el comando:

    --->ionic generate page "intro" 

    Para guardar variables temporales en Ionic se utiliza lo siguiente:
    El ejemplo en este caso es para que al usuario no le salga 
    el modal todo el tiempo de los intro.

    Para utilizar Ionic Storage:
    npm install --save @ionic/storage --save-exact

    npm install @ionic/storage-angular -> Si se usa angular

    NOTA: SIEMPRE ES IMPORTANTE INYECTARLO EN EL COMPONENTE
    Y ESTABLECERLO EN LOS IMPORTS DEL APP.MODULE

   import { IonicStorageModule } from '@ionic/storage-angular';

   @NgModule({
   imports: [
      IonicStorageModule.forRoot()
   ]
   })

   Antes de utilizar el Ionic Storage

   debe crear la bd primero:
    
    async ngOnInit() {
     await this.storage.create();
    }

    y luego se utiliza:
      this.storage.set('isIntroShowed', true);
  
  -------------Controlar la navegación con Guards-------------
  Con el comando el siguiente comando generamos Guards:
  ---->>>   ionic generate guard guards/intro
  Con "guards/intro" estamos especificando la ruta

  Agregar en el app-routing.module, el canActive para controlar 
  las rutas, de la siguiente forma:

  import {IntroGuard} from './guards/intro.guard';
  {
    path: 'home',
    loadChildren: () => import('./home/home.module').then( m => m.HomePageModule),
    canActivate: [IntroGuard], -> True or False-- > Si es True lo deja seguir a la ruta.
  },

  Utilidades de Css con ionic
  <ion-title class="ion-text-uppercase">Este es mi Texto</ion-title>
   
   En este caso ya hay una clase de Css de Ionic que me coloco 
   la frase en mayuscula.
  <figure class="ion-text-center ion-padding">
  Para mas estilos definidos por Ionic:
  https://ionicframework.com/docs/layout/css-utilities

  -------------------  Formularios Reactivos con IONIC--------------
    loginForm: FormGroup; -> Declaramos la variable de tipo FormGroup 
    para poder utilizar las validaciones de los formularios reactivos
     
     Inyectamos en el constructor el FormBuilder para
     permitir la contrucción del formulario y no 
     olvidarse de importar arriba en los modulos.
    constructor(private formBuilder: FormBuilder) {}

    Construimos las primeras validaciones y campos 
    del FormGroup de la siguiente manera:

    this.loginForm = this.formBuilder.group({
      email: new FormControl("", Validators.compose([
        Validators.required,
        Validators.email 
        //Aquí tambien se puede agregar una validación con REGEX, en este caso no fue necesario
        //Porque con Validators.email fue
        //Validators.pattern("^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+.[a-zA-Z0-9-.]+$")
      ])),

      otroCampo: new FormControl("", Validators.compose([]))
    });
  }

  A nivel del HTML FUE SE HACE ASÍ:
 <form [formGroup]="loginForm" (ngSubmit)="loginUser(loginForm.value)">
    <ion-item>
      <ion-label>Email</ion-label>
      <ion-input formControlName="email"></ion-input>
    </ion-item>
  </form>

  NOTA: ES MUY IMPORTANTE SIEMPRE TRABAJAR CON LO COMPONENTES
  DE IONIC 
  <ion-label></ion-label>
  <ion-input></ion-input> POR QUE ESTOS SE RENDERIZARAN DE MANERA NATIVA EN IOS Y ANDROID

  // Esta etiqueta es propia de IONIC y cumple la función de 
    ser un tipo de <p> o <h1> pero sin los estilos propios de 
    una etiqueta p, es basicamente un contenedor logico que sirve
    para mostrar algo o no.
  <ng-container> </ng-container>

  ------------------ Servicio para validar credenciales con IONIC------------------

Para generar un servicio del lado de Ionic es con el comando:
ionic generate service services/authenticate

En este caso no tenemos backend, entonces lo hacemos así:
loginUser(credential){
    return new Promise((resp, reject)=>{
      if(credential.email == "test@tets.com" && credential.password == "12345"){
        resp("Login correcto");
      }else{
        reject("login Incorreto")
      }
    });
}

PERO EN CASO DE TENER BACKEND DENTRO DEL METODO ES CON FETH O ASÍ:
import { HttpClient } from '@angular/common/http';
return this.http.get<Product[]>( `${environment.url_api}/products/`);

NOTA IMPORTANTE: 
Esta forma nos sirve es para ir saltando entre vistas:
this.router.navigateByUrl("/home");

Pero Cuando queremos ir hacia delante o atrás cuando 
se realiza la autenticación exitosa o log out, hacemos uso de:


import { NavController } from '@ionic/angular';

 constructor(private navCtrl: NavController) {} 

this.navCtrl.navigateForward("/home"); -> paso hacia adelante
this.navCtrl.navigateBack("/login"); -> Paso hacia atrás

----------------------- Componente de Ionic------------------
Ion Toolbar:
<ion-toolbar></ion-toolbar>

Me sirve para añadir botones, titulos y elementos
solo en la parte superarior de la aplicación.

Ion Avatar:

<ion-avatar></ion-avatar>

Este componente es una manera bonita de presentar
imagenes dentro de otro elemento de Ionic, basicamente
lo que hace este componente es recubrir la imagen del 
artista y lo va poner en un circulo

Iongrid System:

<ion-grid></ion-grid>

Basicamente, este componente me ayuda a tabular datos y 
controlar en que filas y que columnas para posicionar cosas.

un mejor ejemplo del sistema sería asi:

    <ion-grid>
      <ion-row >
        <ion-col size="2" class="ion-text-start">TEXTO</ion-col>
        <ion-col size="10" class="ion-text-end">TEXTO</ion-col>
        //Con size le indicamos a las filas cuanto va medir las columnas 
      </ion-row>
    </ion-grid>

------------------ Menú EN IONIC-------------------------------

Los menus por defecto no tiene un Header, ni un content..
Entonces se deben borrar del archivo de menu.page.html

Pero si tienen un elemento Padre que es el siguiente:
<ion-split-pane>
</ion-split-pane> 

este <ion-split-pane contentId="content"> debe contener dentro el menú y el lugar
donde se va renderizar el menú, Así:

<ion-split-pane contentId="content">
  <ion-menu contentId="content">
  // este contentId="content" debe ser 
  // igual nombrado cómo este id="content"
  // deben corresponderse
  </ion-menu>
  <ion-router-outlet id="content" main></ion-router-outlet>
</ion-split-pane>

Estas son las parte del menú, siempre se van a utilizar 
cuando se requiera realizarlo en Ionic. 

Con la propiedad side = "end" estamos posicionando el menú 
en la derechara de la pantalla y con "star" a la izquierda.

Ejemplo:
  <ion-menu contentId="content" side="end">

 Siempre se le debe indicar al ionc-button donde va 
 colocar los botones 
 en este caso a la derecha con 
 <ion-buttons slot="end"> 


Para trabajar con el menú de Ionic desde el ts, se debe 
importart la siguiente clase:

  import { MenuController } from '@ionic/angular'; //Importamos

  constructor(private menu: MenuController) { } //Inyectamos

  closeMenu(){
   this.menu.close(); //Utilizamos
  }

------------------- CICLOS DE VIDA DE IONIC----------------------

ionViewDidEnter(){}

Este metodo se ejecuta una vez que hayas entrando exitosamente
en la vista y se haya ejecutado el constructor y el html este listo

------------------ Cargar Archivos JSON Staticos---------------------------------------
Cuando vamos a trabajar con archivos JSON Staticos, se debe 
agregar en el archivo tsconfig.json en el objecto compilerOptions
la bandera:
"resolveJsonModule": true,

______________________ COMPONENTE MODAL ________________________

Cuando se va implementar un modal en Ionic se hace de la siguiente forma:

1. Implementar el modal controler de Ionic, de la siguiente manera:

import { ModalController } from '@ionic/angular';

  //Inyectar
  constructor(private modalController: ModalController) {}

  //Implementar

  const modal = await this.modalController.create({
      component: SongsModalPage,
      //componentesProps sirve de intermediaro entre el home y el modal
      //para enviar los parametros que se necesitan en el otro lado
      componentProps: { 
        songs: songs.tracks, //Parametros de Inicialización 
        artist: artist.name, //Del modal
      } 
  });

  return await modal.present(); //No olvidar el present, para abrir el modal.


NOTA: ES IMPORTANTE RECORDAR QUE EL METODO ONINIT SE UTILIZA
ES EN ANGULAR NO EN IONIC, ENTONCES
SE DEBE QUITAR EL METODO NGONINIT() Y QUITARLO DEL IMPLEMENTS DEL 
COMPONENTE. 

Y SE PONE EL METODO, ionViewDidEnter()

__________________ Plugins & Capacitor________________________

photo: SafeResourceUrl; 
Con esta funcionalidad de algún modo evitamos que 
haya configuraciones mal intecionadas a las urls.

Para utilizar los plugins de capacitor o la camara en este caso,
se importa la siguiente libreria:

import { Plugins, CameraResultType, CameraSource } from "@capacitor/core";

A través de getPhoto podemos acceder a la camara del dispositivo para tomar
la foto, esto pide unas variables antes de iniciar,
cómo la calidad de la imange (quality), el tipo de imangen y 
la fuente de la foto, este caso CameraSource.Camera,
pero de se podria poner que acceda a la galeria con:
CameraSource.Photos

 const image = await Plugins.Camera.getPhoto({
     quality: 100,
     allowEditing: false,
     resultType:CameraResultType.DataUrl, -> Se recomienda utilizar dataUrl porque es mas compatible con un src en el html
     source: CameraSource.Camera
   });

Ahora bien el plugin funciona perfectamente si estuvieramos
ejecutando desde el celular, pero para probar en el navegador
necesitamos ayudarnos del siguiente comando.

npm install @ionic/pwa-elements --save
Esto lo que me va permitir es acceder a los elementos  
del computador, para poder hacer las pruebas de los distintos plugins.

Luego hay que ir al MAIN.TS a realizar la siguiente 
modificacion para que Ionic este al tanto que 
se va trabajar con los componentes del Pc 

import { defineCustomElements } from "@ionic/pwa-elements/loader";
defineCustomElements(window);
____________________  Angular Maps_______________________________
https://angular-maps.com/

Es una libreria de Angular que nos permite manipular facilmente desde 
nuestros componentes opciones para mapas, marcadores , etc.

Para instalar esta libreria es con el comando:
npm install @agm/core

trabajar con una version de Node >= 10.13.0 pero menos a la 15, presenta problemas.

Para trabajar con este componente se necesita generar una llave de de google
"Api key"

Link: 
https://developers.google.com/maps/documentation/javascript/get-api-key

seguir los pasos para obtener la key y posteriormente agregar esa key
en los environments del proyecto.

En caso de problemas con la compilación,
Ajusta lo siguiente:

npm install @types/googlemaps@3.39.12 --save-dev
npm install @agm/core --save